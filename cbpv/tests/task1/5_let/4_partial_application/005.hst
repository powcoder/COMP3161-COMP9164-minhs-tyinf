main :: F Int
     =
    let f :: U (Int -> Int -> F Int) = thunk(
        recfun f :: (Int -> Int -> F Int) x =
            recfun g :: (Int -> F Int) y = reduce -y to z in x * z);

    in let z :: U (Int -> Int -> F Int) = thunk(
        recfun z :: (Int -> Int -> F Int) x = force f 3);   -- discards 2, returns \y -> 3 * -y
    in force z 2 4
